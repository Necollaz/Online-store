public class Program
{
    public static void Main()
    {
        Good iPhone12 = new Good("IPhone 12");
        Good iPhone11 = new Good("IPhone 11");
        Warehouse warehouse = new Warehouse();
        Shop shop = new Shop(warehouse);

        warehouse.Delive(iPhone12, 10);
        warehouse.Delive(iPhone11, 1);

        Cart cart = shop.Cart();
        cart.Add(iPhone12, 4);
        cart.Add(iPhone11, 3);

        Console.WriteLine(cart.Order().Paylink);

        cart.Add(iPhone12, 9);
    }
}

public interface IWarehouse
{
    int GetStockQuantity(Good good);
    bool Remove(Good good, int amount);
}

public class Good
{
    public Good(string name)
    {
        Name = name;
    }

    public string Name { get; private set; }
}

public class Order
{
    public Order(string paylink)
    {
        Paylink = paylink;
    }

    public string Paylink { get; private set; }
}

public class Shop
{
    private readonly Warehouse _warehouse;

    public Shop(Warehouse warehouse)
    {
        _warehouse = warehouse ?? throw new ArgumentNullException(nameof(warehouse));
    }

    public Cart Cart()
    {
        return new Cart(_warehouse);
    }
}

public class Warehouse : IWarehouse
{
    private readonly Dictionary<Good, int> _goods = new Dictionary<Good, int>();

    public void Delive(Good good, int amount)
    {
        Validator.ValidateGood(good);
        Validator.ValidateAmount(amount);

        if (_goods.ContainsKey(good))
            _goods[good] += amount;
        else
            _goods[good] = amount;
    }

    public int GetStockQuantity(Good good)
    {
        Validator.ValidateGood(good);

        return _goods.TryGetValue(good, out int amount) ? amount : 0;
    }

    public bool Remove(Good good, int amount)
    {
        Validator.ValidateGood(good);
        Validator.ValidateAmount(amount);

        if (GetStockQuantity(good) >= amount)
        {
            _goods[good] -= amount;
            return true;
        }

        return false;
    }
}

public class Cart
{
    private readonly IWarehouse _warehouse;
    private readonly Dictionary<Good, int> _items = new Dictionary<Good, int>();

    public Cart(IWarehouse warehouse)
    {
        _warehouse = warehouse ?? throw new ArgumentNullException(nameof(warehouse));
    }

    public void Add(Good good, int amount)
    {
        Validator.ValidateGood(good);
        Validator.ValidateAmount(amount);

        int currentAmountInCart = _items.ContainsKey(good) ? _items[good] : 0;
        int totalAmountDesired = currentAmountInCart + amount;

        if (_warehouse.GetStockQuantity(good) < totalAmountDesired)
            throw new InvalidOperationException("Недостаточно запасов.");

        _items[good] = totalAmountDesired;
    }

    public void PrintCart()
    {
        foreach (var item in _items)
            Console.WriteLine($"{item.Key.Name} - {item.Value}");
    }

    public Order Order()
    {
        foreach (var item in _items)
        {
            if (_warehouse.Remove(item.Key, item.Value) == false)
            {
                throw new InvalidOperationException("Не удалось удалить товары со склада.");
            }
        }

        return new Order("http://payment.link");
    }
}

public static class Validator
{
    public static void ValidateGood(Good good)
    {
        if (good == null)
            throw new ArgumentNullException(nameof(good));
    }

    public static void ValidateAmount(int amount)
    {
        if (amount <= 0)
            throw new ArgumentException("Сумма должна быть больше 0.", nameof(amount));
    }
}
